#!/usr/bin/env python

import commands
import sys
import time
import random
from euca2ools import Euca2ool

euca_conn = None

def instances(test_host=None):
    rval = []
    for r in euca_conn.get_all_instances([]):
        for i in r.instances:
            i.host = i.key_name.split(',')[-1].split(')')[0].strip()
            if test_host and i.host != test_host:
                continue
            rval.append(i)
    return rval


max_instance_count = 12
max_launch_count = 4
error_launch_time = 60

launch_times = {}
def actually_running(instance):
    if not instance.private_dns_name:
        return False
    id_url = "latest/meta-data/instance-id"
    options = "-s --connect-timeout 0.1"
    command = "curl %s %s/%s" % (options, instance.private_dns_name, id_url)
    instance_id = commands.getoutput(command).strip()
    if not instance_id:
        return False
    if instance_id != instance.id:
        print "incorrect (%s) instance id for %s" % (instance_id, instance.id)
        return False
    return True

def main(test_host=None):
    try:
        euca = Euca2ool()
        global euca_conn
        euca_conn = euca.make_connection()
    except:
        print "environment variables not configured"
        sys.exit(1)

    loop = 0
    while True:
        insts = instances(test_host)

        # terminate running instances and check on launched instances
        for i in insts:
            if i.state == 'shutdown':
                if launch_times.has_key(i.id):
                    print "%s,%s,%s, FAIL" % (launch_times[i.id], i.id, i.host)
                    del launch_times[i.id]
                euca_conn.terminate_instances([i.id])
            if i.state == 'running' and actually_running(i):
                if launch_times.has_key(i.id):
                    print '%s,%s,%s, %d' % (launch_times[i.id], i.id, i.host, time.time()-launch_times[i.id])
                    del launch_times[i.id]
                try:
                    euca_conn.terminate_instances([i.id])
                except Exception:
                    # pass in case we have issued a terminate already
                    pass

        # launching new instances
        launch_count = min(random.randint(0, max_instance_count-len(insts)), max_launch_count)
        if launch_count > 0:
            if test_host:
                placement = 'test:%s' % test_host
            else:
                placement = None
            r = euca_conn.run_instances(image_id="ami-tiny",
                                        min_count=launch_count,
                                        placement=placement,
                                        max_count=launch_count)
            assert(len(r.instances) == launch_count)
            for i in r.instances:
                launch_times[i.id] = time.time()

        time.sleep(1)

if __name__ == "__main__":
    test_host = None
    if len(sys.argv) > 1:
        test_host = sys.argv[1]
    main(test_host)
